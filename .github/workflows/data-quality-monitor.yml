name: 🔍 Data Quality Monitor
# Continuous monitoring of data quality and system health

on:
  schedule:
    # Run daily at 12 PM UTC to check data quality
    - cron: '0 12 * * *'
  
  # Trigger after ETL updates
  workflow_run:
    workflows: ["📊 Monthly ETL Update", "📅 Quarterly Rebalance"]
    types: [completed]
  
  workflow_dispatch:

jobs:
  quality-monitor:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
    - name: 📥 Checkout Repository
      uses: actions/checkout@v4
      
    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
        
    - name: 📦 Install UV Package Manager
      run: |
        curl -LsSf https://astral.sh/uv/install.sh | sh
        echo "$HOME/.cargo/bin" >> $GITHUB_PATH
        
    - name: 🔧 Install Dependencies
      run: |
        # Clean install to avoid binary incompatibility issues
        uv sync --reinstall
        
    - name: 🔍 Run Data Quality Checks
      id: quality
      run: |
        echo "🔍 Running comprehensive data quality monitoring..."
        uv run python scripts/check_quality.py || echo "quality_failed=true" >> $GITHUB_OUTPUT
        
    - name: 📊 Generate Quality Dashboard
      if: always()
      run: |
        echo "📊 Generating quality dashboard..."
        
        # Ensure quality_report.json exists
        if [ ! -f quality_report.json ]; then
          echo '{"status": "ERROR", "quality_score": 0, "stock_count": 0, "data_age_days": 0, "anomalies": ["Report generation failed"], "alerts": ["Check logs"], "timestamp": "'$(date -u +"%Y-%m-%dT%H:%M:%S")'"}' > quality_report.json
        fi
        
        uv run python -c "
        import pandas as pd
        import json
        from datetime import datetime
        
        # Load quality report
        with open('quality_report.json', 'r') as f:
            report = json.load(f)
        
        # Simple history (for now, just current entry)
        history = [report]
        
        # Generate dashboard
        dashboard = f'''# 📊 Data Quality Dashboard
        
        **Current Status**: {'✅ HEALTHY' if report['status'] == 'PASS' else '❌ ISSUES DETECTED'}
        
        ## 🔍 Latest Quality Metrics
        
        | Metric | Value | Status |
        |--------|-------|--------|
        | Quality Score | {report['quality_score']:.1%} | {'✅' if report['quality_score'] >= 0.80 else '⚠️' if report['quality_score'] >= 0.70 else '❌'} |
        | Stock Count | {report['stock_count']:,} | {'✅' if report['stock_count'] >= 100 else '⚠️'} |
        | Data Age | {report['data_age_days']} days | {'✅' if report['data_age_days'] <= 32 else '⚠️'} |
        | Anomalies | {len(report['anomalies'])} | {'✅' if len(report['anomalies']) == 0 else '⚠️'} |
        | Alerts | {len(report['alerts'])} | {'✅' if len(report['alerts']) == 0 else '❌'} |
        
        '''
        
        if report['anomalies']:
            dashboard += f'''
        ## 🚨 Detected Anomalies
        '''
            for anomaly in report['anomalies']:
                dashboard += f'\\n- ⚠️ {anomaly}'
        
        if report['alerts']:
            dashboard += f'''
        ## ⚠️ Active Alerts
        '''
            for alert in report['alerts']:
                dashboard += f'\\n- 🚨 {alert}'
        
        dashboard += f'''
        ## 📈 Current Status
        
        | Metric | Value |
        |--------|-------|
        | Quality Score | {report['quality_score']:.1%} |
        | Stock Count | {report['stock_count']:,} |
        | Data Age | {report['data_age_days']} days |
        | Last Updated | {datetime.fromisoformat(report['timestamp']).strftime('%Y-%m-%d %H:%M UTC')} |'''
        
        dashboard += f'''
        
        ## 🎯 Recommendations
        
        '''
        
        if report['quality_score'] >= 0.85:
            dashboard += '✅ **Excellent data quality** - No action needed\\n'
        elif report['quality_score'] >= 0.75:
            dashboard += '⚠️ **Good data quality** - Monitor for declining trends\\n'
        else:
            dashboard += '❌ **Poor data quality** - Investigation required\\n'
        
        if report['data_age_days'] > 32:
            dashboard += '📅 **Stale data detected** - Run ETL update\\n'
            
        if len(report['anomalies']) > 0:
            dashboard += f'🔍 **{len(report[\"anomalies\"])} anomalies detected** - Review data sources\\n'
        
        dashboard += f'''
        
        ---
        *Last updated: {datetime.now().strftime('%Y-%m-%d %H:%M UTC')} | [View Streamlit App](https://modernmagicformula.streamlit.app)*
        '''
        
        with open('quality_dashboard.md', 'w') as f:
            f.write(dashboard)
            
        print('📊 Quality dashboard generated')
        "
        
        # Ensure all files exist
        if [ ! -f quality_summary.txt ]; then
          echo "Quality Score: 0%" > quality_summary.txt
          echo "Stock Count: 0" >> quality_summary.txt
          echo "Status: ERROR" >> quality_summary.txt
          echo "Error: Quality check failed to run" >> quality_summary.txt
        fi
        
        if [ ! -f quality_dashboard.md ]; then
          echo "# 📊 Data Quality Dashboard" > quality_dashboard.md
          echo "" >> quality_dashboard.md
          echo "**Status**: ❌ ERROR - Quality check failed to run" >> quality_dashboard.md
          echo "" >> quality_dashboard.md
          echo "Please check the workflow logs for details." >> quality_dashboard.md
        fi
        
    - name: 🚨 Alert on Quality Issues
      if: steps.quality.outputs.quality_failed == 'true'
      run: |
        echo "🚨 Data quality issues detected!"
        
        # Read quality summary
        cat quality_summary.txt
        
        echo ""
        echo "🔗 Detailed report: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
        
        # In production, you would send alerts here:
        # - Create GitHub issue
        # - Send Slack notification
        # - Email alert
        # - Discord webhook
        
        echo "💡 Configure alert webhooks for production notifications"
        
    - name: 📤 Upload Quality Reports
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: quality-report-${{ github.run_number }}
        path: |
          quality_report.json
          quality_dashboard.md
          quality_summary.txt
        retention-days: 60
        
    - name: 💾 Update Quality Dashboard
      if: success()
      run: |
        # Configure git
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        # Commit quality dashboard
        git add quality_dashboard.md
        
        if ! git diff --staged --quiet; then
          git commit -m "📊 Update data quality dashboard
          
          Quality monitoring results:
          - $(grep 'Quality Score:' quality_summary.txt)
          - $(grep 'Stock Count:' quality_summary.txt)
          - $(grep 'Status:' quality_summary.txt)
          
          🤖 Automated quality monitoring"
          
          git push
          echo "✅ Quality dashboard updated"
        fi