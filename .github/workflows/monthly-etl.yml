name: 📊 Monthly ETL Update
# Automated Russell 1000 data refresh with Magic Formula analysis

on:
  schedule:
    # Run at 6 AM UTC on the 1st of each month
    - cron: '0 6 1 * *'
  
  # Allow manual triggering
  workflow_dispatch:
    inputs:
      test_mode:
        description: 'Run in test mode (50 stocks only)'
        required: false
        default: 'false'
        type: boolean

jobs:
  etl-update:
    runs-on: ubuntu-latest
    timeout-minutes: 60  # 1 hour timeout for full ETL
    
    steps:
    - name: 📥 Checkout Repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        
    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
        
    - name: 📦 Install UV Package Manager
      run: |
        curl -LsSf https://astral.sh/uv/install.sh | sh
        echo "$HOME/.cargo/bin" >> $GITHUB_PATH
        
    - name: 🔧 Install Dependencies
      run: |
        uv sync --reinstall  # Clean install to avoid binary incompatibility
        
    - name: 🔍 Verify Environment
      run: |
        uv run python --version
        uv run python -c "import pandas, numpy, yfinance; print('✅ Core dependencies available')"
        
    - name: 📊 Run ETL Pipeline
      id: etl
      run: |
        echo "🚀 Starting Russell 1000 ETL..."
        
        # Set test mode if requested
        if [ "${{ github.event.inputs.test_mode }}" = "true" ]; then
          echo "🧪 Running in test mode (50 stocks)"
          # Temporarily enable test mode for manual testing
          sed -i 's/test_mode = False/test_mode = True/' etl/main_russell_hybrid.py
        fi
        
        # Run the ETL with timeout protection
        timeout 3600 uv run python -m etl.main_russell_hybrid > etl_output.log 2>&1
        
        # Check if ETL completed successfully
        if [ $? -eq 0 ]; then
          echo "✅ ETL completed successfully"
          echo "success=true" >> $GITHUB_OUTPUT
        else
          echo "❌ ETL failed or timed out"
          echo "success=false" >> $GITHUB_OUTPUT
          cat etl_output.log
          exit 1
        fi
        
    - name: 📈 Validate Data Quality
      if: steps.etl.outputs.success == 'true'
      run: |
        echo "🔍 Validating data quality..."
        
        # Run data quality checks
        uv run python -c "
        import pandas as pd
        
        # Load and validate data
        data = pd.read_csv('data/latest_screening_hybrid.csv')
        
        # Simple quality validation
        stock_count = len(data)
        missing_data = data[['ticker', 'earnings_yield', 'roc', 'f_score']].isnull().sum().sum()
        quality_score = max(0, 1.0 - (missing_data / (stock_count * 4)))
        
        print(f'📊 Stocks processed: {stock_count}')
        print(f'🔍 Quality score: {quality_score:.1%}')
        
        # Validation thresholds
        if stock_count < 100:
            raise Exception(f'Too few stocks processed: {stock_count} < 100')
        if quality_score < 0.75:
            raise Exception(f'Quality score too low: {quality_score:.1%} < 75%')
        
        print('✅ Data quality validation passed')
        "
        
    - name: 📝 Generate Update Summary
      if: steps.etl.outputs.success == 'true'
      run: |
        echo "📋 Generating update summary..."
        
        # Create summary report
        uv run python -c "
        import pandas as pd
        from datetime import datetime
        
        data = pd.read_csv('data/latest_screening_hybrid.csv')
        
        # Generate summary
        summary = f'''📊 **ETL Update Summary - {datetime.now().strftime('%B %Y')}**
        
        ✅ **Data Processing**:
        - 📈 Stocks analyzed: {len(data):,}
        - 🏛️ SEC EDGAR coverage: {(data['sec_data_available'].sum()/len(data)*100):.1f}%
        - 🌐 Yahoo Finance coverage: {(data['yahoo_data_available'].sum()/len(data)*100):.1f}%
        
        🏆 **Top 10 Magic Formula Stocks**:
        '''
        
        top_10 = data.sort_values('magic_formula_rank').head(10)
        for i, (_, row) in enumerate(top_10.iterrows()):
            summary += f'''
        {i+1:2d}. **{row['ticker']}** - {row['company_name'][:40]}
            - EY: {row['earnings_yield']:.1%} | ROC: {row['roc']:.1%} | F-Score: {row['f_score']}'''
        
        summary += f'''
        
        🎯 **Ready for Magic Formula DIY picks**: https://modernmagicformula.streamlit.app
        '''
        
        with open('update_summary.md', 'w') as f:
            f.write(summary)
            
        print('📄 Summary report generated')
        "
        
    - name: 💾 Commit Updated Data
      if: steps.etl.outputs.success == 'true'
      run: |
        # Configure git
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        # Add updated files
        git add data/latest_screening_hybrid.csv
        git add data/latest_screening_hybrid.json
        git add data/metadata_hybrid.json
        git add data_quality/quality_history.json
        
        # Check if there are changes to commit
        if git diff --staged --quiet; then
          echo "📊 No data changes detected - skipping commit"
        else
          # Create commit with summary
          git commit -m "$(cat <<'EOF'
        📊 Monthly data update - $(date +'%B %Y')
        
        Automated Russell 1000 Magic Formula refresh:
        - Updated stock fundamentals and rankings
        - Refreshed data quality monitoring
        - Ready for Streamlit Cloud deployment
        
        🤖 Generated by GitHub Actions
        EOF
        )"
          
          # Push changes
          git push
          echo "✅ Data committed and pushed"
        fi
        
    - name: 📤 Upload ETL Logs
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: etl-logs
        path: |
          etl_output.log
          update_summary.md
        retention-days: 30
        
    - name: 🚨 Notify on Failure
      if: failure()
      run: |
        echo "❌ ETL Pipeline Failed"
        echo "Check the logs for details: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
        
        # In production, you could send notifications here:
        # - Slack webhook
        # - Email via SendGrid
        # - Discord webhook
        echo "💡 Set up notification webhooks for production monitoring"